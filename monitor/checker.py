import sqlite3
import pandas as pd
import io
from google_sheets.manager import GoogleSheetManager
from .telegram import send_telegram_message
from bot.utils.role_manager import role_manager


async def check_for_updates(redis_client):
    with sqlite3.connect("users.db") as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT telegram_id FROM users WHERE role = 'manager'")
        manager_ids = [row[0] for row in cursor.fetchall()]

    for manager_id in manager_ids:
        spreadsheet_name = str(manager_id)
        sheet_manager = GoogleSheetManager(spreadsheet_name)
        new_data = sheet_manager.read_all_data()

        if '–ê–≤—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π' not in new_data.columns:
            new_data['–ê–≤—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π'] = ''

        redis_key = f"google_sheets_data_{manager_id}"
        old_data_str = await redis_client.get(redis_key, encoding="utf-8")

        if old_data_str is None:
            await redis_client.set(redis_key, new_data.to_json())
            continue

        if not old_data_str or not old_data_str.strip():
            await send_telegram_message(f"–û—à–∏–±–∫–∞: –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ Redis –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {manager_id}. –°–±—Ä–∞—Å—ã–≤–∞—é –∏ —Å–æ—Ö—Ä–∞–Ω—è—é –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.")
            await redis_client.set(redis_key, new_data.to_json())
            continue

        try:
            old_data = pd.read_json(io.StringIO(old_data_str))
            if '–ê–≤—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π' not in old_data.columns:
                old_data['–ê–≤—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π'] = ''
        except ValueError as e:
            await send_telegram_message(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {manager_id}: {str(e)}. –°–±—Ä–∞—Å—ã–≤–∞—é –∏ —Å–æ—Ö—Ä–∞–Ω—è—é –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.")
            await redis_client.set(redis_key, new_data.to_json())
            continue

        old_data_bot_changes = old_data[old_data['–ê–≤—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π'] == 'bot'].index
        new_data_bot_changes = new_data[new_data['–ê–≤—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π'] == 'bot'].index

        old_data_filtered = old_data.drop(old_data_bot_changes)
        new_data_filtered = new_data.drop(new_data_bot_changes)

        message = f"üîî –í —Ç–∞–±–ª–∏—Ü–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {manager_id} –ø—Ä–æ–∏–∑–æ—à–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–µ –æ—Ç –±–æ—Ç–∞):\n"
        changes = []

        if not old_data_filtered.empty and not new_data_filtered.empty:
            common_indices = old_data_filtered.index.intersection(new_data_filtered.index)
            if not common_indices.empty:
                old_common = old_data_filtered.loc[common_indices].reset_index(drop=True)
                new_common = new_data_filtered.loc[common_indices].reset_index(drop=True)
                for idx in range(len(old_common)):
                    for col in old_common.columns:
                        if col == '–ê–≤—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π':
                            continue
                        old_value = old_common.iloc[idx][col]
                        new_value = new_common.iloc[idx][col]
                        if pd.isna(old_value) and pd.isna(new_value):
                            continue
                        if old_value != new_value:
                            changes.append(
                                f"- –Ø—á–µ–π–∫–∞ [{common_indices[idx]}, {col}]: –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Å '{old_value}' –Ω–∞ '{new_value}'"
                            )

        added_rows = set(new_data_filtered.index) - set(old_data_filtered.index)
        if added_rows:
            for idx in added_rows:
                row_data = new_data_filtered.loc[idx].drop('–ê–≤—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π').to_dict()
                changes.append(f"- –°—Ç—Ä–æ–∫–∞ {idx} –¥–æ–±–∞–≤–ª–µ–Ω–∞: {row_data}")

        deleted_rows = set(old_data_filtered.index) - set(new_data_filtered.index)
        if deleted_rows:
            for idx in deleted_rows:
                changes.append(f"- –°—Ç—Ä–æ–∫–∞ {idx} —É–¥–∞–ª–µ–Ω–∞")

        if changes:
            message += "\n".join(changes)
        else:
            message += "–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã, –Ω–æ –≤—Å–µ –æ–Ω–∏ –æ—Ç –±–æ—Ç–∞."

        if changes:
            await send_telegram_message(message)

        await redis_client.set(redis_key, new_data.to_json())
