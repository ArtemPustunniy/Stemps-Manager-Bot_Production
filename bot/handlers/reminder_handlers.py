import sqlite3
from datetime import datetime, timedelta
import json
from telegram import Update
from telegram.ext import CallbackContext, CommandHandler
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from bot.utils.role_manager import role_manager
from openai import AsyncOpenAI
from bot.config.settings import OPENAI_API_KEY
import logging

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = AsyncIOScheduler(timezone="Europe/Moscow")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)

async def parse_reminder_message(user_input: str) -> dict:
    """
    –ü–∞—Ä—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ —Å –ø–æ–º–æ—â—å—é LLM –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
    """
    current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    prompt = (
        "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. "
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: '12-–≥–æ —á–∏—Å–ª–∞ –æ —Ç–æ–º, —á—Ç–æ —è –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏ —Å–∞–º–æ–ª—ë—Ç –ø–æ –ö—É—Ä—Å—É1' "
        "–∏–ª–∏ '–∑–∞–≤—Ç—Ä–∞ –≤ 14:00 –ø–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É –ø–æ –ø–æ–≤–æ–¥—É –ø—Ä–æ–µ–∫—Ç–∞'. "
        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞: "
        "1. –ò–∑–≤–ª–µ—á—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ï—Å–ª–∏ –¥–∞—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∑–∞–≤—Ç—Ä–∞', '—á–µ—Ä–µ–∑ 3 –¥–Ω—è'), "
        f"–∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è ({current_date}) –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞. –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π 00:00. "
        "2. –ò–∑–≤–ª–µ—á—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è: "
        "- action: –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–Ω–∞–ø–∏—Å–∞—Ç—å', '–ø–æ–∑–≤–æ–Ω–∏—Ç—å'). "
        "- company: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –∫–æ–º—É –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∫–æ–º–ø–∞–Ω–∏–∏ –°–∞–º–æ–ª—ë—Ç'). "
        "- topic: —Ç–µ–º–∞ –∏–ª–∏ –∫—É—Ä—Å, –ø–æ –ø–æ–≤–æ–¥—É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∫—É—Ä—Å–∞ –ö—É—Ä—Å1'). "
        "3. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∞—Å–∏–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–ù–µ –∑–∞–±—É–¥—å, —Ç—ã –¥–æ–ª–∂–µ–Ω [–¥–µ–π—Å—Ç–≤–∏–µ] [–∫–æ–º—É] –ø–æ –ø–æ–≤–æ–¥—É [—Ç–µ–º–∞/–∫—É—Ä—Å].' "
        "–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON: "
        "{"
        "  'remind_date': 'YYYY-MM-DD HH:MM:SS',"
        "  'action': '<–¥–µ–π—Å—Ç–≤–∏–µ>',"
        "  'company': '<–∫–æ–º—É>',"
        "  'topic': '<—Ç–µ–º–∞>',"
        "  'formatted_message': '<–∫—Ä–∞—Å–∏–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ>'"
        "}"
        "–°–æ—Ö—Ä–∞–Ω—è–π –∫–ª—é—á–µ–≤—ã–µ –¥–µ—Ç–∞–ª–∏ (–¥–∞—Ç—ã, –∏–º–µ–Ω–∞, –∫—É—Ä—Å—ã –∏ —Ç.–¥.), –Ω–æ –¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –±–æ–ª–µ–µ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–º –∏ –ø—Ä–∏—è—Ç–Ω—ã–º. "
        "–ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –∏–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É + 1 –¥–µ–Ω—å. "
        "–ù–µ –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏—Ö –¥–µ—Ç–∞–ª–µ–π, –Ω–µ –º–µ–Ω—è–π —Å–º—ã—Å–ª. "
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: '{user_input}'"
    )

    try:
        response = await openai_client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": prompt},
                {"role": "user", "content": user_input}
            ],
            max_tokens=200,
            temperature=0.3,
        )
        result = response.choices[0].message.content.strip()
        # –ü–∞—Ä—Å–∏–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
        parsed_data = json.loads(result)

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π
        required_fields = ["remind_date", "action", "company", "topic", "formatted_message"]
        if not all(field in parsed_data for field in required_fields):
            raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ JSON")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        try:
            remind_date = datetime.strptime(parsed_data["remind_date"], "%Y-%m-%d %H:%M:%S")
        except ValueError:
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {parsed_data['remind_date']}")

        return parsed_data
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ LLM: {str(e)}")
        # –ï—Å–ª–∏ LLM –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        tomorrow = (datetime.now().replace(hour=0, minute=0, second=0) + timedelta(days=1))
        return {
            "remind_date": tomorrow.strftime("%Y-%m-%d %H:%M:%S"),
            "action": "–Ω–∞–ø–∏—Å–∞—Ç—å",
            "company": "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏",
            "topic": "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π —Ç–µ–º—ã",
            "formatted_message": f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {user_input}"
        }

async def remindme(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    if not role_manager.get_role(user_id):
        await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä—É.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not role_manager.is_active(user_id):
        await update.message.reply_text("–ë–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω. –í–∫–ª—é—á–∏—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é /start_work_day.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if not context.args:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remindme <–¥–∞—Ç–∞> <—Å–æ–æ–±—â–µ–Ω–∏–µ>\n"
            "–ü—Ä–∏–º–µ—Ä: /remindme 12-–≥–æ —á–∏—Å–ª–∞ –æ —Ç–æ–º, —á—Ç–æ —è –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏ —Å–∞–º–æ–ª—ë—Ç –ø–æ –ö—É—Ä—Å—É1\n"
            "–ò–ª–∏: /remindme –∑–∞–≤—Ç—Ä–∞ –≤ 14:00 –ø–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É –ø–æ –ø–æ–≤–æ–¥—É –ø—Ä–æ–µ–∫—Ç–∞"
        )
        return

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É
    reminder_text = " ".join(context.args)

    # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ LLM
    reminder_data = await parse_reminder_message(reminder_text)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON
    remind_date = datetime.strptime(reminder_data["remind_date"], "%Y-%m-%d %H:%M:%S")
    action = reminder_data.get("action", "–Ω–∞–ø–∏—Å–∞—Ç—å")
    company = reminder_data.get("company", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏")
    topic = reminder_data.get("topic", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π —Ç–µ–º—ã")
    formatted_message = reminder_data.get("formatted_message", f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder_text}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    with sqlite3.connect("users.db") as conn:
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO reminders (telegram_id, remind_date, action, company, topic, formatted_message, is_sent) VALUES (?, ?, ?, ?, ?, ?, ?)",
            (user_id, remind_date.strftime("%Y-%m-%d %H:%M:%S"), action, company, topic, formatted_message, 0)
        )
        reminder_id = cursor.lastrowid
        conn.commit()

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    async def send_reminder():
        await context.bot.send_message(chat_id=user_id, text=formatted_message)
        # –ü–æ–º–µ—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
        with sqlite3.connect("users.db") as conn:
            cursor = conn.cursor()
            cursor.execute("UPDATE reminders SET is_sent = 1 WHERE id = ?", (reminder_id,))
            conn.commit()

    scheduler.add_job(
        send_reminder,
        "date",
        run_date=remind_date,
        args=[],
        id=f"reminder_{reminder_id}"
    )

    await update.message.reply_text(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {remind_date.strftime('%d.%m.%Y %H:%M')}: {formatted_message}")


async def listreminders(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    if not role_manager.get_role(user_id):
        await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä—É.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    with sqlite3.connect("users.db") as conn:
        cursor = conn.cursor()
        cursor.execute(
            "SELECT id, remind_date, formatted_message FROM reminders WHERE telegram_id = ? AND is_sent = 0",
            (user_id,)
        )
        reminders = cursor.fetchall()

    if not reminders:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    response_text = "üìÖ *–í–∞—à–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    for reminder in reminders:
        reminder_id, remind_date, formatted_message = reminder
        remind_date = datetime.strptime(remind_date, "%Y-%m-%d %H:%M:%S")
        response_text += (
            f"ID: {reminder_id}\n"
            f"–î–∞—Ç–∞: {remind_date.strftime('%d.%m.%Y %H:%M')}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {formatted_message}\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        )

    await update.message.reply_text(response_text, parse_mode="MarkdownV2")

def load_existing_reminders(app):
    with sqlite3.connect("users.db") as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT id, telegram_id, remind_date, formatted_message FROM reminders WHERE is_sent = 0")
        reminders = cursor.fetchall()

    for reminder in reminders:
        reminder_id, telegram_id, remind_date, formatted_message = reminder
        remind_date = datetime.strptime(remind_date, "%Y-%m-%d %H:%M:%S")

        if remind_date < datetime.now():
            with sqlite3.connect("users.db") as conn:
                cursor = conn.cursor()
                cursor.execute("UPDATE reminders SET is_sent = 1 WHERE id = ?", (reminder_id,))
                conn.commit()
            continue

        async def send_reminder():
            await app.bot.send_message(chat_id=telegram_id, text=formatted_message)
            with sqlite3.connect("users.db") as conn:
                cursor = conn.cursor()
                cursor.execute("UPDATE reminders SET is_sent = 1 WHERE id = ?", (reminder_id,))
                conn.commit()

        scheduler.add_job(
            send_reminder,
            "date",
            run_date=remind_date,
            args=[],
            id=f"reminder_{reminder_id}"
        )

def setup_reminder_handlers(app):
    app.add_handler(CommandHandler("remindme", remindme))

def start_scheduler(app):
    load_existing_reminders(app)
    logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    scheduler.start()

__all__ = ["setup_reminder_handlers", "start_scheduler"]