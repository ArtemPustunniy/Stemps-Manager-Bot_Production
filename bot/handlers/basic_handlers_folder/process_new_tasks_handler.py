from telegram import Update
from telegram.ext import CallbackContext, ConversationHandler

from bot.utils.role_manager import role_manager
from bot.utils.stats_manager import stats_manager
from google_sheets.manager import GoogleSheetManager
import logging
from bot.config.settings import OPENAI_API_KEY
from openai import AsyncOpenAI
import json

openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)

logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)

ADD_TASKS = 2


async def process_new_tasks(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    message_text = update.message.text.strip()

    spreadsheet_name = context.user_data.get("spreadsheet_name")
    manager_id = context.user_data.get("manager_id")
    if not spreadsheet_name or not manager_id:
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start_work_day."
        )
        return ConversationHandler.END

    sheet_manager = GoogleSheetManager(spreadsheet_name)
    new_tasks = []

    if message_text.lower() == "–Ω–µ—Ç":
        await update.message.reply_text(
            f"‚úÖ <b>–ù–æ–≤—ã—Ö –∑–∞–¥–∞—á –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.</b>\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üìÖ <b>–ü–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å –æ—Å—Ç–∞—ë—Ç—Å—è:</b> {context.user_data['daily_plan']} –∑–∞–¥–∞—á.",
            parse_mode="HTML",
        )
        return ConversationHandler.END

    lines = message_text.split("\n")
    is_strict_format = True
    for line in lines:
        parts = [part.strip() for part in line.split(",")]
        if len(parts) != 4:
            is_strict_format = False
            break

    if is_strict_format:
        for line in lines:
            parts = [part.strip() for part in line.split(",")]
            client, course, amount, payment_status = parts
            row_data = [client, course, amount, payment_status, "–ù–µ—Ç", "bot"]
            sheet_manager.add_row(row_data)
            new_tasks.append(row_data)
    else:
        prompt = (
            """–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –ø—Ä–µ–æ–±—Ä–∞–∑—É—é—â–∏–π —Ç–µ–∫—Å—Ç –≤ JSON.
            –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ —Å–¥–µ–ª–∞—Ç—å —Å –Ω–µ–π —Å–ª–µ–¥—É—é—â–µ–µ:

            –í –∑–∞–ø—Ä–æ—Å–µ –º–æ–≥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ã. –¢–æ –µ—Å—Ç—å –∫–∞–∂–¥—ã–π —á–µ–ª–æ–≤–µ–∫ –º–æ–∂–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å –∏—Ö –ø–æ-—Ä–∞–∑–Ω–æ–º—É.
            –í–æ—Ç –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–≥–æ, –∫–∞–∫ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞–∑–≤–∞–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏:
            **–ö–ª–∏–µ–Ω—Ç** - [–û–ê–û, –ó–ê–û, –ü–ê–û, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ, —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ, –∫–æ–º–ø–∞–Ω–∏—è], –∞ —Ç–∞–∫–∂–µ –≤—Å–µ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—ã —ç—Ç–∏—Ö —Å–ª–æ–≤ –≤ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
            **–ö—É—Ä—Å** - [–Ω–∞—à –ø—Ä–æ–¥—É–∫—Ç, –ø—Ä–æ–¥—É–∫—Ç], –∞ —Ç–∞–∫–∂–µ –≤—Å–µ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—ã —ç—Ç–∏—Ö —Å–ª–æ–≤ –≤ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
            **–°—É–º–º–∞** - [—Å—Ç–æ–∏–º–æ—Å—Ç—å, —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–æ–≤, —Ü–µ–Ω–∞, —Ü–µ–Ω–Ω–∏–∫, —Ü–µ–Ω–∞ –∫—É—Ä—Å–∞, —Ü–µ–Ω–∞ –∫—É—Ä—Å–æ–≤, –ø—Ä–∞–π—Å]. –¢–∞–∫–∂–µ –µ—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–∏—à–ª–∏ —Ñ—Ä–∞–∑—ã –ø–æ —Ç–∏–ø—É [–∫—É—Ä—Å—ã —Å—Ç–æ—è—Ç, –ø–æ —Ü–µ–Ω–µ, —Å—Ç–æ–∏–º–æ—Å—Ç—å—é], –∞ –¥–∞–ª—å—à–µ —Å—Ç–æ—è—Ç —Ü–∏—Ñ—Ä—ã, —Ç–æ —Å–ª–µ–¥—É–µ—Ç —Ä–∞—Å—Ü–µ–Ω–∏–≤–∞—Ç—å —ç—Ç–æ –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ—ã "—Å—É–º–º–∞"
            **–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã** - [–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã]. –ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–∏—à–ª–∏ —Ñ—Ä–∞–∑—ã –ø–æ —Ç–∏–ø—É [–∫–ª–∏–µ–Ω—Ç –æ–ø–ª–∞—Ç–∏–ª, –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞], —Ç–æ –µ—Å—Ç—å —Ñ—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã, —Ç–æ —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –±—É–¥–µ—Ç —Ä–∞–≤–µ–Ω "–î–∞"
            **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –ª–∏ –∑–∞–∫–∞–∑?** - –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —ç—Ç–æ –ø–æ–ª–µ –≤—Å–µ–≥–¥–∞ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ–º "–ù–µ—Ç", –µ—Å–ª–∏ –Ω–µ –Ω–∞–ø–∏—Å–∞–Ω–æ –≤ –∑–∞–ø—Ä–æ—Å–µ –∏–Ω–∞—á–µ.

            –ü—Ä–µ–æ–±—Ä–∞–∑—É–π —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ JSON –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π.

            –í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ JSON **–º–∞—Å—Å–∏–≤–∞**, –¥–∞–∂–µ –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –æ–¥–Ω–∞. –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ ‚Äî —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏ "–∫–ª–∏–µ–Ω—Ç", "–∫—É—Ä—Å", "—Å—É–º–º–∞", "—Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –ª–∏ –∑–∞–∫–∞–∑?".

            –ü—Ä–∏–º–µ—Ä —Ç–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞:
            [
                {"–∫–ª–∏–µ–Ω—Ç": "–û–û–û –†–æ–º–∞—à–∫–∞", "–∫—É—Ä—Å": "–§–∞—Å–∞–¥", "—Å—É–º–º–∞": "10000", "—Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã": "–î–∞", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –ª–∏ –∑–∞–∫–∞–∑?": "–ù–µ—Ç"},
                {"–∫–ª–∏–µ–Ω—Ç": "–ó–ê–û –ö–ª–µ–Ω", "–∫—É—Ä—Å": "–î–∏–∑–∞–π–Ω", "—Å—É–º–º–∞": "15000", "—Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã": "–ù–µ—Ç", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –ª–∏ –∑–∞–∫–∞–∑?": "–ù–µ—Ç"}
            ]

            –û—Ç–≤–µ—Ç—å **–¢–û–õ–¨–ö–û** –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –º–∞—Å—Å–∏–≤–∞.\n\n"""
            f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: {message_text}\n"
        )

        response = await openai_client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –ø—Ä–µ–æ–±—Ä–∞–∑—É—é—â–∏–π —Ç–µ–∫—Å—Ç –≤ JSON-–∫–æ–º–∞–Ω–¥—ã.",
                },
                {"role": "user", "content": prompt},
            ],
            max_tokens=500,
            temperature=0.0,
        )
        try:
            tasks_json_raw = response.choices[0].message.content.strip()
            tasks_json = json.loads(tasks_json_raw)

            if not isinstance(tasks_json, list):
                tasks_json = [tasks_json]

            for task in tasks_json:
                row_data = [
                    task.get("–∫–ª–∏–µ–Ω—Ç", ""),
                    task.get("–∫—É—Ä—Å", ""),
                    task.get("—Å—É–º–º–∞", ""),
                    task.get("—Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã", ""),
                    task.get("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –ª–∏ –∑–∞–∫–∞–∑?", "–ù–µ—Ç"),
                    "bot",
                ]
                logging.info(
                    f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —á–µ—Ä–µ–∑ LLM –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {manager_id}: {row_data}"
                )
                sheet_manager.add_row(row_data)
                new_tasks.append(row_data)
        except (json.JSONDecodeError, AttributeError) as e:
            await update.message.reply_text(
                "‚ùå <b>–û—à–∏–±–∫–∞:</b> –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.",
                parse_mode="HTML",
            )
            logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ LLM –æ—Ç–≤–µ—Ç–∞: {str(e)}")
            return ADD_TASKS

    new_tasks_count = len(new_tasks)
    context.user_data["daily_plan"] += new_tasks_count

    confirmation = (
        "‚úÖ <b>–ó–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!</b>\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üìã <b>–î–æ–±–∞–≤–ª–µ–Ω–æ {new_tasks_count} –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á:</b>\n"
    )
    for task in new_tasks:
        confirmation += f"‚Ä¢ {task[0]} | {task[1]} | {task[2]} | –û–ø–ª–∞—Ç–∞: {task[3]}\n"
    confirmation += (
        f"üìÖ <b>–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å:</b> {context.user_data['daily_plan']} –∑–∞–¥–∞—á."
    )

    await update.message.reply_text(confirmation, parse_mode="HTML")
    return ConversationHandler.END


__all__ = ["process_new_tasks"]
