from telegram import Update
from telegram.ext import CallbackContext, ConversationHandler

from bot.handlers.basic_handlers import end_of_day_reminder
from bot.utils.role_manager import role_manager
from bot.utils.stats_manager import stats_manager
from google_sheets.manager import GoogleSheetManager
import logging
from bot.config.settings import OPENAI_API_KEY
from openai import AsyncOpenAI
from datetime import time
import pytz

openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)

logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)

ADD_TASKS = 2


async def start_work_day(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    role = role_manager.get_role(user_id)
    if not role:
        await update.message.reply_text(
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä—É."
        )
        return ConversationHandler.END

    if role_manager.is_active(user_id):
        await update.message.reply_text(
            "–ë–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –≤–∞—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
        )
        return ConversationHandler.END

    role_manager.set_active(user_id, True)

    manager_id = user_id
    spreadsheet_name = str(user_id)
    if role_manager.is_director(user_id) and context.args:
        try:
            manager_id = int(context.args[0])
            spreadsheet_name = str(manager_id)
        except ValueError:
            await update.message.reply_text("–û—à–∏–±–∫–∞: ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return ConversationHandler.END

    context.user_data["manager_id"] = manager_id
    context.user_data["spreadsheet_name"] = spreadsheet_name

    if role_manager.is_director(user_id):
        await update.message.reply_text(
            "üëë <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å, –¥–∏—Ä–µ–∫—Ç–æ—Ä!</b>\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            "üåü –£–¥–∞—á–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è!\n",
            parse_mode="HTML",
        )
        return ConversationHandler.END

    yesterday_stats = stats_manager.get_yesterday_stats(manager_id)
    if not yesterday_stats:
        stats_text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—á–µ—Ä–∞:</b>\n–ó–∞ –≤—á–µ—Ä–∞ –≤—ã –Ω–µ –∑–∞–∫—Ä—ã–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞."
        )
    else:
        stats_text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –≤—á–µ—Ä–∞:</b>\n"
        for stat in yesterday_stats:
            client_name, course, contract_amount, timestamp = stat
            stats_text += (
                f"‚Ä¢ {client_name} | {course} | {contract_amount} | {timestamp}\n"
            )

    sheet_manager = GoogleSheetManager(spreadsheet_name)
    all_rows = sheet_manager.sheet.get_all_values()[1:]
    unclosed_tasks = [
        row for row in all_rows if len(row) >= 5 and row[4].lower() == "–Ω–µ—Ç"
    ]

    if not unclosed_tasks:
        unclosed_text = "‚úÖ <b>–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏:</b>\n–ù–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á —Å –≤—á–µ—Ä–∞ –Ω–µ—Ç."
    else:
        unclosed_text = "‚úÖ <b>–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏ —Å –≤—á–µ—Ä–∞ (–Ω—É–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å):</b>\n"
        for task in unclosed_tasks:
            client_name = task[0] if len(task) > 0 else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            course = task[1] if len(task) > 1 else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            contract_amount = task[2] if len(task) > 2 else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            payment_status = task[3] if len(task) > 3 else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            unclosed_text += f"‚Ä¢ {client_name} | {course} | {contract_amount} | –û–ø–ª–∞—Ç–∞: {payment_status}\n"

    completed_count = len(yesterday_stats)
    unclosed_count = len(unclosed_tasks)
    total_tasks_yesterday = completed_count + unclosed_count

    motivation_text = ""
    if total_tasks_yesterday > 0:
        unclosed_ratio = unclosed_count / total_tasks_yesterday
        if 0 < unclosed_ratio < 0.1:
            prompt = "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫–æ–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–æ—â—Ä—è—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—á–µ—Ä–∞ –≤—ã–ø–æ–ª–Ω–∏–ª –ø–æ—á—Ç–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏."
            response = await openai_client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=50,
                temperature=0.2,
            )
            ai_response = response.choices[0].message.content.strip()
            motivation_text = f"\nüéâ <b>–ú–æ—Ç–∏–≤–∞—Ü–∏—è:</b>\n{ai_response}\n"
        elif unclosed_ratio == 0:
            prompt = "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫–æ–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–æ—â—Ä—è—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—á–µ—Ä–∞ –≤—ã–ø–æ–ª–Ω–∏–ª –≤–æ–æ–±—â–µ –≤—Å–µ –∑–∞–¥–∞—á–∏."
            response = await openai_client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=50,
                temperature=0.2,
            )
            ai_response = response.choices[0].message.content.strip()
            motivation_text = f"\nüéâ <b>–ú–æ—Ç–∏–≤–∞—Ü–∏—è:</b>\n{ai_response}\n"
        elif unclosed_ratio > 0.1:
            motivation_text = (
                "\nüéâ <b>–ú–æ—Ç–∏–≤–∞—Ü–∏—è:</b>\n"
                "–°–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π –¥–µ–Ω—å, —á—Ç–æ–±—ã —Å–∏—è—Ç—å! –û—Å—Ç–∞–ª–æ—Å—å –Ω–µ–º–Ω–æ–≥–æ –∑–∞–¥–∞—á —Å –≤—á–µ—Ä–∞ ‚Äî "
                "–≤–ø–µ—Ä—ë–¥ –∫ –Ω–æ–≤—ã–º –≤–µ—Ä—à–∏–Ω–∞–º, —Ç—ã –≤—Å—ë —Å–º–æ–∂–µ—à—å!\n"
            )

    daily_plan = unclosed_count
    context.user_data["daily_plan"] = daily_plan
    context.user_data["completed_today"] = 0
    context.user_data["last_milestone"] = 0

    moscow_tz = pytz.timezone("Europe/Moscow")
    reminder_time = time(18, 45, tzinfo=moscow_tz)
    context.job_queue.run_daily(
        end_of_day_reminder,
        reminder_time,
        data=user_id,
        name=f"end_of_day_reminder_{user_id}",
    )
    logging.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è {user_id} –Ω–∞ 19:34 –ú–°–ö")

    welcome_message = (
        "‚úÖ <b>–ë–æ—Ç –≤–∫–ª—é—á—ë–Ω!</b> –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã.\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"{stats_text}\n"
        f"{unclosed_text}\n"
        f"üìÖ <b>–¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å:</b> {daily_plan} –∑–∞–¥–∞—á.\n"
        f"{motivation_text}"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
        "‚Ä¢ –í —Ñ–æ—Ä–º–∞—Ç–µ: <code>–ö–ª–∏–µ–Ω—Ç1, –ö—É—Ä—Å1, –°—É–º–º–∞1, –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã1</code>\n"
        "‚Ä¢ –ò–ª–∏ –æ–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–î–æ–±–∞–≤–∏—Ç—å –û–û–û –í–µ—Ä–±–∞ –Ω–∞ –∫—É—Ä—Å –ß—ë—Ä–Ω—ã–π –∑–∞ 10000 —Å –æ–ø–ª–∞—Ç–æ–π'),\n"
        "‚Ä¢ –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ <code>'–Ω–µ—Ç'</code>, –µ—Å–ª–∏ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç."
    )
    await update.message.reply_text(welcome_message, parse_mode="HTML")
    return ADD_TASKS


__all__ = ["start_work_day"]
